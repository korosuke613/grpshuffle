// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: korosuke613/grpshuffle/v1/grpshuffle.proto

package grpshufflev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/korosuke613/grpshuffle/gen/korosuke613/grpshuffle/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ComputeServiceName is the fully-qualified name of the ComputeService service.
	ComputeServiceName = "korosuke613.grpshuffle.v1.ComputeService"
)

// ComputeServiceClient is a client for the korosuke613.grpshuffle.v1.ComputeService service.
type ComputeServiceClient interface {
	Shuffle(context.Context, *connect_go.Request[v1.ShuffleRequest]) (*connect_go.Response[v1.ShuffleResponse], error)
}

// NewComputeServiceClient constructs a client for the korosuke613.grpshuffle.v1.ComputeService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewComputeServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ComputeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &computeServiceClient{
		shuffle: connect_go.NewClient[v1.ShuffleRequest, v1.ShuffleResponse](
			httpClient,
			baseURL+"/korosuke613.grpshuffle.v1.ComputeService/Shuffle",
			opts...,
		),
	}
}

// computeServiceClient implements ComputeServiceClient.
type computeServiceClient struct {
	shuffle *connect_go.Client[v1.ShuffleRequest, v1.ShuffleResponse]
}

// Shuffle calls korosuke613.grpshuffle.v1.ComputeService.Shuffle.
func (c *computeServiceClient) Shuffle(ctx context.Context, req *connect_go.Request[v1.ShuffleRequest]) (*connect_go.Response[v1.ShuffleResponse], error) {
	return c.shuffle.CallUnary(ctx, req)
}

// ComputeServiceHandler is an implementation of the korosuke613.grpshuffle.v1.ComputeService
// service.
type ComputeServiceHandler interface {
	Shuffle(context.Context, *connect_go.Request[v1.ShuffleRequest]) (*connect_go.Response[v1.ShuffleResponse], error)
}

// NewComputeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewComputeServiceHandler(svc ComputeServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/korosuke613.grpshuffle.v1.ComputeService/Shuffle", connect_go.NewUnaryHandler(
		"/korosuke613.grpshuffle.v1.ComputeService/Shuffle",
		svc.Shuffle,
		opts...,
	))
	return "/korosuke613.grpshuffle.v1.ComputeService/", mux
}

// UnimplementedComputeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedComputeServiceHandler struct{}

func (UnimplementedComputeServiceHandler) Shuffle(context.Context, *connect_go.Request[v1.ShuffleRequest]) (*connect_go.Response[v1.ShuffleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("korosuke613.grpshuffle.v1.ComputeService.Shuffle is not implemented"))
}
