// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpshuffle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComputeClient is the client API for Compute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComputeClient interface {
	Shuffle(ctx context.Context, in *ShuffleRequest, opts ...grpc.CallOption) (*ShuffleResponse, error)
	RepeatShuffle(ctx context.Context, in *RepeatShuffleRequest, opts ...grpc.CallOption) (Compute_RepeatShuffleClient, error)
}

type computeClient struct {
	cc grpc.ClientConnInterface
}

func NewComputeClient(cc grpc.ClientConnInterface) ComputeClient {
	return &computeClient{cc}
}

func (c *computeClient) Shuffle(ctx context.Context, in *ShuffleRequest, opts ...grpc.CallOption) (*ShuffleResponse, error) {
	out := new(ShuffleResponse)
	err := c.cc.Invoke(ctx, "/grpshuffle.Compute/Shuffle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeClient) RepeatShuffle(ctx context.Context, in *RepeatShuffleRequest, opts ...grpc.CallOption) (Compute_RepeatShuffleClient, error) {
	stream, err := c.cc.NewStream(ctx, &Compute_ServiceDesc.Streams[0], "/grpshuffle.Compute/RepeatShuffle", opts...)
	if err != nil {
		return nil, err
	}
	x := &computeRepeatShuffleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Compute_RepeatShuffleClient interface {
	Recv() (*ShuffleResponse, error)
	grpc.ClientStream
}

type computeRepeatShuffleClient struct {
	grpc.ClientStream
}

func (x *computeRepeatShuffleClient) Recv() (*ShuffleResponse, error) {
	m := new(ShuffleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ComputeServer is the server API for Compute service.
// All implementations must embed UnimplementedComputeServer
// for forward compatibility
type ComputeServer interface {
	Shuffle(context.Context, *ShuffleRequest) (*ShuffleResponse, error)
	RepeatShuffle(*RepeatShuffleRequest, Compute_RepeatShuffleServer) error
	mustEmbedUnimplementedComputeServer()
}

// UnimplementedComputeServer must be embedded to have forward compatible implementations.
type UnimplementedComputeServer struct {
}

func (UnimplementedComputeServer) Shuffle(context.Context, *ShuffleRequest) (*ShuffleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shuffle not implemented")
}
func (UnimplementedComputeServer) RepeatShuffle(*RepeatShuffleRequest, Compute_RepeatShuffleServer) error {
	return status.Errorf(codes.Unimplemented, "method RepeatShuffle not implemented")
}
func (UnimplementedComputeServer) mustEmbedUnimplementedComputeServer() {}

// UnsafeComputeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComputeServer will
// result in compilation errors.
type UnsafeComputeServer interface {
	mustEmbedUnimplementedComputeServer()
}

func RegisterComputeServer(s grpc.ServiceRegistrar, srv ComputeServer) {
	s.RegisterService(&Compute_ServiceDesc, srv)
}

func _Compute_Shuffle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShuffleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServer).Shuffle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpshuffle.Compute/Shuffle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServer).Shuffle(ctx, req.(*ShuffleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compute_RepeatShuffle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RepeatShuffleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ComputeServer).RepeatShuffle(m, &computeRepeatShuffleServer{stream})
}

type Compute_RepeatShuffleServer interface {
	Send(*ShuffleResponse) error
	grpc.ServerStream
}

type computeRepeatShuffleServer struct {
	grpc.ServerStream
}

func (x *computeRepeatShuffleServer) Send(m *ShuffleResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Compute_ServiceDesc is the grpc.ServiceDesc for Compute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Compute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpshuffle.Compute",
	HandlerType: (*ComputeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Shuffle",
			Handler:    _Compute_Shuffle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RepeatShuffle",
			Handler:       _Compute_RepeatShuffle_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpshuffle.proto",
}
